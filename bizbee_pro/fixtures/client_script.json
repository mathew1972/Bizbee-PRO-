[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-04-08 00:05:46.701902",
  "module": "Bizbee_pro",
  "name": "Estimate Filter",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_business_type: function(frm) {\n        let custom_business_type = frm.doc.custom_business_type;\n\n        if (custom_business_type) {\n            frappe.call({\n                method: \"bizbee_pro.api.get_service_filter\",\n                args: { custom_business_type: custom_business_type },\n                callback: function(r) {\n                    if (r.message) {\n                        let items = r.message;\n                        let dialog = new frappe.ui.Dialog({\n                            title: __('Select Services'),\n                            fields: [\n                                {\n                                    fieldtype: 'MultiSelect',\n                                    fieldname: 'department_filter',\n                                    label: __('Filter by Department'),\n                                    options: ['All'].concat(Array.from(new Set(items.map(item => item.department))))\n                                },\n                                {\n                                    fieldtype: 'HTML',\n                                    fieldname: 'items_area'\n                                },\n                                {\n                                    fieldtype: 'Check',\n                                    fieldname: 'select_all',\n                                    label: __('Select All'),\n                                    default: false\n                                },\n                            ],\n                            primary_action_label: __('Add Selected Items'),\n                            primary_action: function() {\n                                let selected_items = [];\n                                if (dialog.fields_dict['select_all'].checked) {\n                                    // If \"Select All\" is checked, add all items\n                                    selected_items = items;\n                                } else {\n                                    // Otherwise, add selected items\n                                    dialog.fields_dict['items_area'].$wrapper.find(':checked').each(function () {\n                                        selected_items.push(JSON.parse($(this).attr('data-item')));\n                                    });\n                                }\n\n                                // Clear existing items\n                                frm.doc.items = [];\n\n                                // Add selected items\n                                selected_items.forEach(function(item) {                                    \n                                    let row = frappe.model.add_child(frm.doc, \"Sales Order Item\", \"items\");\n                                    frappe.model.set_value(row.doctype, row.name, \"item_code\", item.item_code);\n                                    frappe.model.set_value(row.doctype, row.name, \"item_name\", item.item_name);\n                                    frappe.model.set_value(row.doctype, row.name, \"custom_department\", item.department);\n                                    frappe.model.set_value(row.doctype, row.name, \"description\", item.description);\n                                });\n\n                                // Manually trigger events for rate calculation here\n                                // For example:\n                                // frm.trigger('calculate_totals'); // Adjust this according to Frappe's event mechanism\n                                // Refresh form fields\n                                frm.refresh_field(\"items\");\n                                dialog.hide();\n                                \n                            }\n                        });\n\n                        // Change the color of the primary action button to #f2b659\n                        dialog.get_primary_btn().css('background-color', '#f2b659');\n\n                        // Render items based on selected department\n                        function renderItems(department) {\n                            let filtered_items = items.filter(item => department.includes('All') || department.includes(item.department));\n                            let html = '<table class=\"table table-bordered\"><thead style=\"background-color: #f2b659;\"><tr><th>Item Code</th><th>Item Name</th><th>Service Name</th><th>Department</th></tr></thead><tbody>';\n                            filtered_items.forEach(function(item) {\n                                html += '<tr><td><input type=\"checkbox\" data-item=\\'' + JSON.stringify(item) + '\\'></td><td>' + item.item_code + '</td><td>' + item.item_name + '</td><td>' + item.department + '</td></tr>';\n                            });\n                            html += '</tbody></table>';\n                            dialog.fields_dict['items_area'].$wrapper.html(html);\n                        }\n\n                        // Attach event listener to department filter\n                        dialog.get_field('department_filter').$input.on('change', function() {\n                            let selected_departments = $(this).val();\n                            renderItems(selected_departments);\n                        });\n\n                        // Attach event listener to \"Select All\" checkbox\n                        dialog.get_field('select_all').$input.on('change', function() {\n                            let checked = $(this).prop('checked');\n                            dialog.fields_dict['items_area'].$wrapper.find(':checkbox').prop('checked', checked);\n                        });\n\n                        // Initially render items with 'All' department selected\n                        renderItems(['All']);\n\n                        dialog.show();\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-04-08 00:04:44.034920",
  "module": "Bizbee_pro",
  "name": "Estimate Tax Rate",
  "script": "frappe.ui.form.on('Sales Order Item', {\n    rate: function(frm, cdt, cdn) {\n        calculateAmount(frm, cdt, cdn);\n    },\n    qty: function(frm, cdt, cdn) {\n        calculateAmount(frm, cdt, cdn);\n    }\n});\n\nfunction calculateAmount(frm, cdt, cdn) {\n    var child = locals[cdt][cdn];\n    var item_tax_rate = child.item_tax_rate;\n\n    // Extract tax rate from item_tax_rate\n    var tax_rate = 0;\n    if (item_tax_rate) {\n        var tax_rate_info = JSON.parse(item_tax_rate);\n        // Iterate over tax rates\n        for (var key in tax_rate_info) {\n            if (tax_rate_info.hasOwnProperty(key)) {\n                // Assuming tax rate key contains \"VAT\"\n                if (key.includes(\"VAT\")) {\n                    tax_rate = tax_rate_info[key];\n                    break; // Break after finding the first VAT rate\n                }\n            }\n        }\n    }\n\n    // Calculate tax_amount\n    var rate = child.rate;\n    var tax_amount = rate * (tax_rate / 100);\n\n    // Calculate amount\n    var qty = child.qty;\n    var custom_total_amount = (rate + tax_amount) * qty;\n\n    // Set tax_rate, tax_amount, and amount field values\n    frappe.model.set_value(cdt, cdn, 'tax_rate', tax_rate);\n    frappe.model.set_value(cdt, cdn, 'tax_amount', tax_amount);\n    frappe.model.set_value(cdt, cdn, 'custom_total_amount', custom_total_amount);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-04-08 00:05:29.427730",
  "module": "Bizbee_pro",
  "name": "Sales Invoice Tax Rate",
  "script": "frappe.ui.form.on('Sales Invoice Item', {\n    rate: function(frm, cdt, cdn) {\n        calculateAmount(frm, cdt, cdn);\n    },\n    qty: function(frm, cdt, cdn) {\n        calculateAmount(frm, cdt, cdn);\n    }\n});\n\nfunction calculateAmount(frm, cdt, cdn) {\n    var child = locals[cdt][cdn];\n    var item_tax_rate = child.item_tax_rate;\n\n    // Extract tax rate from item_tax_rate\n    var tax_rate = 0;\n    if (item_tax_rate) {\n        var tax_rate_info = JSON.parse(item_tax_rate);\n        // Iterate over tax rates\n        for (var key in tax_rate_info) {\n            if (tax_rate_info.hasOwnProperty(key)) {\n                // Assuming tax rate key contains \"VAT\"\n                if (key.includes(\"VAT\")) {\n                    tax_rate = tax_rate_info[key];\n                    break; // Break after finding the first VAT rate\n                }\n            }\n        }\n    }\n\n    // Calculate tax_amount\n    var rate = child.rate;\n    var tax_amount = rate * (tax_rate / 100);\n\n    // Calculate amount\n    var qty = child.qty;\n    var total_amount = (rate + tax_amount) * qty;\n\n    // Set tax_rate, tax_amount, and amount field values\n    frappe.model.set_value(cdt, cdn, 'tax_rate', tax_rate);\n    frappe.model.set_value(cdt, cdn, 'tax_amount', tax_amount);\n    frappe.model.set_value(cdt, cdn, 'total_amount', total_amount);\n}\n",
  "view": "Form"
 }
]