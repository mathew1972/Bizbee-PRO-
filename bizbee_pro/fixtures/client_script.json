[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-05-03 19:58:06.274516",
  "module": "Bizbee_pro",
  "name": "Estimate Filter",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_business_type: function(frm) {\n        // Function triggered when custom_business_type field changes\n        let custom_business_type = frm.doc.custom_business_type;\n\n        if (custom_business_type) {\n            // Call server-side method to fetch service filter options\n            frappe.call({\n                method: \"bizbee_pro.api.get_service_filter\",\n                args: { custom_business_type: custom_business_type },\n                callback: function(r) {\n                    if (r.message) {\n                        let items = r.message;\n\n                        // Create a dialog box to select services\n                        let dialog = new frappe.ui.Dialog({\n                            title: __('Services Filter'),\n                            fields: [\n                                {\n                                    fieldtype: 'MultiSelect',\n                                    fieldname: 'department_filter',\n                                    label: __('Filter by Department'),\n                                    // Options for department filter\n                                    options: ['All'].concat(Array.from(new Set(items.map(item => item.department)))),\n                                    default: ['All'] // Set 'All' as default\n                                },\n                                {\n                                    fieldtype: 'Check',\n                                    fieldname: 'select_all',\n                                    label: __('Select All'),\n                                    default: false\n                                },\n                                {\n                                    fieldtype: 'HTML',\n                                    fieldname: 'items_area'\n                                }\n                            ],\n                            primary_action_label: __('Add Selected Service'),\n                            primary_action: function() {\n                                // Function to add selected services to the Sales Order\n                                let selected_items = [];\n                                if (dialog.fields_dict['select_all'].checked) {\n                                    // If \"Select All\" is checked, add all items\n                                    selected_items = items;\n                                } else {\n                                    // Otherwise, add selected items\n                                    dialog.fields_dict['items_area'].$wrapper.find(':checked').each(function () {\n                                        selected_items.push(JSON.parse($(this).attr('data-item')));\n                                    });\n                                }\n\n                                // Check if any items are selected\n                                if(selected_items.length === 0) {\n                                    frappe.msgprint(\"Please select at least one item before adding to the Estimate.\");\n                                    return;\n                                }\n\n                                // Clear existing items in Sales Order\n                                frm.doc.items = [];\n\n                                // Add selected items to Sales Order\n                                selected_items.forEach(function(item) {                                    \n                                    let row = frappe.model.add_child(frm.doc, \"Sales Order Item\", \"items\");\n                                    frappe.model.set_value(row.doctype, row.name, \"item_code\", item.item_code);\n                                    frappe.model.set_value(row.doctype, row.name, \"item_name\", item.item_name);\n                                    frappe.model.set_value(row.doctype, row.name, \"custom_department\", item.department);\n                                    frappe.model.set_value(row.doctype, row.name, \"description\", item.description);\n                                });\n\n                                // Refresh form fields\n                                frm.refresh_field(\"items\");\n                                dialog.hide();\n                            }\n                        });\n\n                        // Change the color of the primary action button to #000000\n                        dialog.get_primary_btn().css('background-color', '#000000');\n\n                        // Function to render items based on selected department\n                        function renderItems(department) {\n                            let filtered_items = items.filter(item => department.includes('All') || department.includes(item.department));\n                            let html = '<table class=\"table table-bordered\"><thead style=\"background-color: #febd59;\"><tr><th>Select</th><th>Code</th><th>Service Name</th><th>Department</th></tr></thead><tbody>';\n                            filtered_items.forEach(function(item) {\n                                html += '<tr><td><input type=\"checkbox\" data-item=\\'' + JSON.stringify(item) + '\\'></td><td>' + item.item_code + '</td><td>' + item.item_name + '</td><td>' + item.department + '</td></tr>';\n                            });\n                            html += '</tbody></table>';\n                            dialog.fields_dict['items_area'].$wrapper.html(html);\n                        }\n\n                        // Attach event listener to department filter\n                        dialog.get_field('department_filter').$input.on('change', function() {\n                            let selected_departments = $(this).val();\n                            renderItems(selected_departments);\n                        });\n\n                        // Attach event listener to \"Select All\" checkbox\n                        dialog.get_field('select_all').$input.on('change', function() {\n                            let checked = $(this).prop('checked');\n                            dialog.fields_dict['items_area'].$wrapper.find(':checkbox').prop('checked', checked);\n                        });\n\n                        // Initially render items with 'All' department selected\n                        renderItems(['All']);\n\n                        // Show the dialog box\n                        dialog.show();\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-05-06 10:48:40.913698",
  "module": "Bizbee_pro",
  "name": "Estimate Tax Rate",
  "script": "frappe.ui.form.on('Sales Order', {\n    onload: function(frm) {\n        setCustomEstimateValidTill(frm);\n    }\n});\n\nfrappe.ui.form.on('Sales Order Item', {\n    rate: function(frm, cdt, cdn) {\n        calculateAmount(frm, cdt, cdn);\n    },\n    qty: function(frm, cdt, cdn) {\n        calculateAmount(frm, cdt, cdn);\n    }\n});\n\nfunction calculateAmount(frm, cdt, cdn) {\n    var child = locals[cdt][cdn];\n    var item_tax_rate = child.item_tax_rate;\n\n    // Extract tax rate from item_tax_rate\n    var tax_rate = 0;\n    if (item_tax_rate) {\n        var tax_rate_info = JSON.parse(item_tax_rate);\n        // Iterate over tax rates\n        for (var key in tax_rate_info) {\n            if (tax_rate_info.hasOwnProperty(key)) {\n                // Assuming tax rate key contains \"VAT\"\n                if (key.includes(\"VAT\")) {\n                    tax_rate = tax_rate_info[key];\n                    break; // Break after finding the first VAT rate\n                }\n            }\n        }\n    }\n\n    // Calculate tax_amount\n    var rate = child.rate;\n    var tax_amount = rate * (tax_rate / 100);\n\n    // Calculate amount\n    var qty = child.qty;\n    var custom_total_amount = (rate + tax_amount) * qty;\n\n    // Set tax_rate, tax_amount, and amount field values\n    frappe.model.set_value(cdt, cdn, 'tax_rate', tax_rate);\n    frappe.model.set_value(cdt, cdn, 'tax_amount', tax_amount);\n    frappe.model.set_value(cdt, cdn, 'custom_total_amount', custom_total_amount);\n\n    // Set delivery_date 30 days from the current date\n    var current_date = frappe.datetime.now_datetime();\n    var delivery_date = frappe.datetime.add_days(current_date, 30);\n    frappe.model.set_value(cdt, cdn, 'delivery_date', delivery_date);\n}\n\nfunction setCustomEstimateValidTill(frm) {\n    // Set custom_estimate_valid_till to current date + 30 days\n    var current_date = frappe.datetime.now_datetime();\n    var estimate_valid_till = frappe.datetime.add_days(current_date, 30);\n    frm.set_value('custom_estimate_valid_till', estimate_valid_till);\n}\n\nfrappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        setDeliveryDate(frm);\n        setCustomEstimateValidTill(frm);\n        \n        // Periodically check for the existence of the button and hide it when found\n        var interval = setInterval(function() {\n            var button = $('#page-Sales\\\\ Order button:contains(\"Get Items From\")');\n            if (button.length) {\n                button.hide();\n                clearInterval(interval); // Stop the interval once the button is hidden\n            }\n        }, 500); // Check every 500 milliseconds\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-05-17 19:12:47.332849",
  "module": "Bizbee_pro",
  "name": "Sales Invoice Tax Rate",
  "script": "frappe.ui.form.on('Sales Invoice Item', {\n    rate: function(frm, cdt, cdn) {\n        calculateAmount(frm, cdt, cdn);\n    },\n    qty: function(frm, cdt, cdn) {\n        calculateAmount(frm, cdt, cdn);\n    },\n    price_list_rate: function(frm, cdt, cdn) {\n        calculateAmount(frm, cdt, cdn);\n    },\n    custom_markup_: function(frm, cdt, cdn) {\n        calculateAmount(frm, cdt, cdn);\n    }\n});\n\nfunction calculateAmount(frm, cdt, cdn) {\n    var child = locals[cdt][cdn];\n    var item_tax_rate = child.item_tax_rate;\n\n    // Extract tax rate from item_tax_rate\n    var tax_rate = 0;\n    if (item_tax_rate) {\n        var tax_rate_info = JSON.parse(item_tax_rate);\n        // Iterate over tax rates\n        for (var key in tax_rate_info) {\n            if (tax_rate_info.hasOwnProperty(key)) {\n                // Assuming tax rate key contains \"VAT\"\n                if (key.includes(\"VAT\")) {\n                    tax_rate = tax_rate_info[key];\n                    break; // Break after finding the first VAT rate\n                }\n            }\n        }\n    }\n\n    // Calculate price_list_rate, custom_markup_, and custom_rate_slab\n    var price_list_rate = child.price_list_rate;\n    var custom_markup = child.custom_markup_;\n    var custom_rate_slab = child.custom_rate_slab;\n\n    // Calculate rate\n    var rate = price_list_rate * (custom_markup / 100) + price_list_rate;\n\n    // Calculate tax_amount\n    var tax_amount = rate * (tax_rate / 100);\n\n    // Calculate amount\n    var qty = child.qty;\n    var total_amount = (rate + tax_amount) * qty;\n\n    // Set rate, tax_rate, tax_amount, and total_amount field values\n    frappe.model.set_value(cdt, cdn, 'rate', rate);\n    frappe.model.set_value(cdt, cdn, 'tax_rate', tax_rate);\n    frappe.model.set_value(cdt, cdn, 'tax_amount', tax_amount);\n    frappe.model.set_value(cdt, cdn, 'total_amount', total_amount);\n    // Set custom_rate_slab field value\n    frappe.model.set_value(cdt, cdn, 'custom_rate_slab', custom_rate_slab);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-05-17 18:49:20.173911",
  "module": "Bizbee_pro",
  "name": "Update Rate",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n\n        // Add sub-button for Rate Comparison\n        frm.add_custom_button(__('Rate Comparison'), function() {\n            // Implement Rate Comparison functionality here\n            compareRates(frm);\n        }, __('Update Rate')).addClass('btn-primary');\n\n        // Add sub-button for Rate Replace\n        frm.add_custom_button(__('Rate Replace'), function() {\n            // Implement Rate Replace functionality here\n            replaceRates(frm);\n        }, __('Update Rate')).addClass('btn-primary');\n\n        // Hide the \"Fetch Timesheet\" button\n        $('[data-label=\"Fetch%20Timesheet\"]').hide();\n    },\n\n    update_rate: function(frm) {\n        frm.doc.items.forEach(function(item) {\n            if (item.item_code) {\n                frappe.call({\n                    method: 'bizbee_pro.api.custom_update_rate',\n                    args: {\n                        item_code: item.item_code\n                    },\n                    callback: function(r) {\n                        if (r.message) {\n                            frappe.model.set_value(item.doctype, item.name, 'custom_update_rate', r.message.price_list_rate);\n                            frm.refresh_field('items');\n                            updateRowColor(frm, item);\n                        }\n                    }\n                });\n            }\n        });\n    }\n});\n\nfunction updateRowColor(frm, item) {\n    // Access the cell elements for price_list_rate and custom_update_rate\n    var price_list_rate_cell = $('[data-fieldname=\"items\"] [data-idx=\"' + item.idx + '\"] [data-fieldname=\"price_list_rate\"]');\n    var custom_update_rate_cell = $('[data-fieldname=\"items\"] [data-idx=\"' + item.idx + '\"] [data-fieldname=\"custom_update_rate\"]');\n\n    // Check if the rates are equal\n    if (item.price_list_rate !== item.custom_update_rate) {\n        // If not equal, set background color to #ff9999\n        price_list_rate_cell.css('background-color', '#ff9999');\n        custom_update_rate_cell.css('background-color', '#ff9999');\n    } else {\n        // Reset background color if rates are equal\n        price_list_rate_cell.css('background-color', '');\n        custom_update_rate_cell.css('background-color', '');\n    }\n}\n\nfunction compareRates(frm) {\n    frm.trigger('update_rate');\n    frm.doc.items.forEach(function(item) {\n        if (item.item_code) {\n            var custom_update_rate = item.custom_update_rate;\n            var price_list_rate = item.price_list_rate;\n\n            if (custom_update_rate !== price_list_rate) {\n                // Implement your comparison logic here\n                // You can log the comparison or perform any other action\n                console.log(\"Custom update rate is different from price list rate for item: \" + item.item_name);\n            } else {\n                console.log(\"Custom update rate is equal to price list rate for item: \" + item.item_name);\n            }\n        }\n    });\n}\n\nfunction replaceRates(frm) {\n    frm.doc.items.forEach(function(item) {\n        if (item.item_code) {\n            // Store the current value of custom_markup_\n            var custom_markup_value = item.custom_markup_;\n\n            // Set price_list_rate equal to custom_update_rate\n            frappe.model.set_value(item.doctype, item.name, 'price_list_rate', item.custom_update_rate);\n\n            // Restore the custom_markup_ value\n            frappe.model.set_value(item.doctype, item.name, 'custom_markup_', custom_markup_value);\n        }\n    });\n    frm.refresh_field('items');\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-04-30 22:45:39.953132",
  "module": "Bizbee_pro",
  "name": "Help Estimate",
  "script": "frappe.ui.form.on('Sales Order', {\n    onload: function(frm) {\n        // Add custom help button\n        frm.add_custom_button(__('Help'), function() {\n            // Action when help button is clicked\n            var help_text = `\n                <div style=\"padding: 20px;\">\n                    <h3>Estimate</h3>\n                    <p>An estimate is a tentative projection of the expenses associated with the services provided to a customer. It serves as an approximation of the anticipated costs, facilitating transparency and informed decision-making for both the service provider and the client.</p>\n                    <p>An Estimate contains details about:</p>\n                    <ul>\n                        <li>The recipient of the Estimate.</li>\n                        <li>The Service you are offering.</li>\n                        <li>The rates at which they are offered.</li>\n                        <li>The taxes applicable.</li>\n                        <li>Other charges if applicable.</li>\n                        <li>The validity of contract.</li>\n                        <li>Other conditions.</li>\n                    </ul>\n                    <h4>Prerequisites</h4>\n                    <p>Before creating and using an Estimate, it is advised that you create the following first:</p>\n                    <ul>\n                        <li>Client</li>\n                        <li>Services</li>\n                    </ul>\n                    <h4>How to create an Estimate</h4>\n                    <ol>\n                        <li>Go to the Estimate list, click on New.</li>\n                        <li>Select if the Estimate is to a Customer or a Lead from the 'Quotation To' field.</li>\n                        <li>Enter Client name.</li>\n                        <li>Enter a Valid till date after which the quoted amount will be considered invalid.</li>\n                        <li>Add the Service and their quantities in the Service table, the prices will be fetched automatically from Service Price. You can also fetch Services from client business type wise filter.</li>\n                        <li>Add additional taxes and charges as applicable.</li>\n                        <li>Save.</li>\n                    </ol>\n                    <p style=\"text-align: center;\">For further assistance, including suggestions, please send mail to <a href=\"mailto:bizbeeinsights@gmail.com\">bizbeeinsights@gmail.com</a></p>\n                </div>`;\n            frappe.msgprint(help_text);\n        }).css({'background-color': '#febd59', 'width': '130px', 'color': 'white', 'font-weight': 'bold'});\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-05-02 20:22:30.450608",
  "module": "Bizbee_pro",
  "name": "Purchase Required Date",
  "script": "frappe.ui.form.on('Purchase Order', {\n    onload: function(frm) {\n        setCustomScheduleDate(frm);\n    }\n});\n\nfunction setCustomScheduleDate(frm) {\n    // Set schedule_date to current date + 30 days\n    var current_date = frappe.datetime.now_datetime();\n    var schedule_date = frappe.datetime.add_days(current_date, 30);\n    frm.set_value('schedule_date', schedule_date);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-05-06 09:48:35.500844",
  "module": "Bizbee_pro",
  "name": "Purchase Order Filter - 2",
  "script": "frappe.ui.form.on('Purchase Order', {\n    onload: function(frm) {\n    \n    },\n    refresh: function(frm) {\n        // Add button to trigger dialog\n        frm.add_custom_button(__('PO Pending'), function() {\n            // Call server-side method to fetch service filter options\n            frappe.call({\n                method: \"bizbee_pro.api.get_purchase_update_data\",\n                callback: function(r) {\n                    if (r.message) {\n                        let items = r.message;\n\n                        // Check if there are pending purchase orders\n                        if (items.length === 0) {\n                            frappe.msgprint({\n                                message: 'No Purchase Order Pending',\n                                indicator: 'orange'\n                            });\n                            return;\n                        }\n\n                        // Extract unique departments\n                        let departments = Array.from(new Set(items.map(item => item.department)));\n\n                        // Extract unique estimate numbers\n                        let estimates = Array.from(new Set(items.map(item => item.estimate_no)));\n\n                        // Create a dialog box to select services\n                        let dialog = new frappe.ui.Dialog({\n                            title: __('Purchase Order Pending'),\n                            fields: [\n                                {\n                                    fieldtype: 'Select',\n                                    fieldname: 'department_filter',\n                                    label: __('Filter by Department'),\n                                    // Options for department filter\n                                    options: departments,\n                                    default: departments[0] || '' // Set the default department here\n                                },\n                                {\n                                    fieldtype: 'Select',\n                                    fieldname: 'client_filter',\n                                    label: __('Filter by Client'),\n                                    // Options for client filter\n                                    options: ['All'].concat(Array.from(new Set(items.map(item => item.client_name)))),\n                                    default: 'All' // Set 'All' as default\n                                },\n                                {\n                                    fieldtype: 'Select',\n                                    fieldname: 'estimate_filter',\n                                    label: __('Filter by Estimate'),\n                                    // Options for estimate filter\n                                    options: ['All'].concat(estimates),\n                                    default: 'All' // Set 'All' as default\n                                },\n                                {\n                                    fieldtype: 'Check',\n                                    fieldname: 'select_all_items',\n                                    label: __('Select All'),\n                                    onchange: function() {\n                                        let checked = this.get_value();\n                                        dialog.fields_dict['items_area'].$wrapper.find('input[type=\"checkbox\"]').prop('checked', checked);\n                                    }\n                                },\n                                {\n                                    fieldtype: 'HTML',\n                                    fieldname: 'items_area'\n                                }\n                            ],\n                            primary_action_label: __('Add Selected Service'),\n                            primary_action: function() {\n                                let selected_department = dialog.get_value('department_filter');\n                                let selected_client = dialog.get_value('client_filter');\n                                let selected_estimate = dialog.get_value('estimate_filter');\n                                if(selected_department === 'All' && selected_client === 'All' && selected_estimate === 'All') {\n                                    frappe.msgprint({\n                                        message: 'Please select at least one filter.',\n                                        indicator: 'red'\n                                    });\n                                    return;\n                                }\n\n                                // Function to add selected services to Purchase Order Item\n                                let selected_items = [];\n                                dialog.fields_dict['items_area'].$wrapper.find(':checked').each(function () {\n                                    selected_items.push(JSON.parse($(this).attr('data-item')));\n                                });\n\n                                if (selected_items.length === 0) {\n                                    frappe.msgprint({\n                                        message: 'Please select at least one service.',\n                                        indicator: 'red'\n                                    });\n                                    return;\n                                }\n\n                                // Clear existing rows in the child table\n                                frm.clear_table(\"items\");\n\n                                // Add selected items to Purchase Order Item\n                                selected_items.forEach(function(item) {\n                                    let row = frappe.model.add_child(frm.doc, \"Purchase Order Item\", \"items\");\n                                    frappe.model.set_value(row.doctype, row.name, \"item_code\", item.item_code);\n                                    frappe.model.set_value(row.doctype, row.name, \"item_name\", item.item_name);\n                                    frappe.model.set_value(row.doctype, row.name, \"custom_department\", item.department);\n                                    frappe.model.set_value(row.doctype, row.name, \"sales_order\", item.estimate_no);\n                                    frappe.model.set_value(row.doctype, row.name, \"custom_client_name\", item.client_name);\n                                    frappe.model.set_value(row.doctype, row.name, \"custom_purchase_update_id\", item.name);\n                                    \n                                    frm.set_value(\"supplier\", item.department); // Update supplier field\n                                });\n\n                                // Refresh form fields\n                                frm.refresh_field(\"items\");\n                                dialog.hide();\n                            }\n                        });\n\n                        // Change the color of the primary action button\n                        dialog.get_primary_btn().css('background-color', '#000000');\n\n                        // Function to render items based on selected department, client, and estimate\n                        function renderItems(department, client, estimate) {\n                            let filtered_items = items.filter(item => \n                                (department === 'All' || department === item.department) && \n                                (client === 'All' || client === item.client_name) &&\n                                (estimate === 'All' || estimate === item.estimate_no)\n                            );\n                            let html = '<table class=\"table table-bordered\"><thead style=\"background-color: #febd59;\"><tr><th>Select</th><th>Code</th><th>Service</th><th>Department</th><th>Estimate</th><th>Client</th></tr></thead><tbody>';\n                            filtered_items.forEach(function(item) {\n                                html += '<tr><td><input type=\"checkbox\" data-item=\\'' + JSON.stringify(item) + '\\'></td><td>' + item.item_code + '</td><td>' + item.item_name + '</td><td>' + item.department + '</td><td>' + item.estimate_no + '</td><td>' + item.client_name + '</td></tr>';\n                            });\n                            html += '</tbody></table>';\n                            dialog.fields_dict['items_area'].$wrapper.html(html);\n                        }\n\n                        // Attach event listener to department, client, and estimate filters\n                        dialog.get_field('department_filter').$input.on('change', function() {\n                            let selected_department = $(this).val();\n                            let selected_client = dialog.get_value('client_filter');\n                            let selected_estimate = dialog.get_value('estimate_filter');\n                            renderItems(selected_department, selected_client, selected_estimate);\n                        });\n\n                        dialog.get_field('client_filter').$input.on('change', function() {\n                            let selected_client = $(this).val();\n                            let selected_department = dialog.get_value('department_filter');\n                            let selected_estimate = dialog.get_value('estimate_filter');\n                            renderItems(selected_department, selected_client, selected_estimate);\n                        });\n\n                        dialog.get_field('estimate_filter').$input.on('change', function() {\n                            let selected_estimate = $(this).val();\n                            let selected_department = dialog.get_value('department_filter');\n                            let selected_client = dialog.get_value('client_filter');\n                            renderItems(selected_department, selected_client, selected_estimate);\n                        });\n\n                        // Initially render items with 'All' department, client, and estimate selected\n                        renderItems(departments[0] || '', 'All', 'All'); // Set your default department, client, and estimate here\n\n                        // Show the dialog box\n                        dialog.show();\n                    }\n                }\n            });\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-05-04 11:59:20.838140",
  "module": "Bizbee_pro",
  "name": "Purchase Order Hide Button",
  "script": "frappe.ui.form.on('Purchase Order', {\n    onload: function(frm) {\n        // Hide the \"Get Items From\" button\n        $('.inner-group-button[data-label=\"Get%20Items%20From\"]').hide();\n\n        // Hide the \"Tools\" button\n        $('.btn.btn-default.ellipsis:contains(\"Tools\")').hide();\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-05-09 20:22:06.668761",
  "module": "Bizbee_pro",
  "name": "Purchase Invoice - Colour Cell",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    refresh: function(frm) {\n        // Get the table element\n        var table = frm.fields_dict['items'].grid.wrapper.find('.grid-body');\n\n        // Loop through each row in the table\n        table.find('.grid-row').each(function() {\n            var row = $(this);\n            var custom_add_to_selling = row.find('[data-fieldname=\"custom_add__to_selling\"] .control-input-wrapper input').val();\n            var custom_new_selling_rate = row.find('[data-fieldname=\"custom_new_selling_rate\"] .control-input-wrapper input').val();\n\n            // Check if 'custom_add__to_selling' field has a value\n            if (custom_add_to_selling && custom_add_to_selling !== '') {\n                row.find('[data-fieldname=\"custom_add__to_selling\"] .control-input-wrapper').css('background-color', 'yellow');\n            }\n\n            // Check if 'custom_new_selling_rate' field has a value\n            if (custom_new_selling_rate && custom_new_selling_rate !== '') {\n                row.find('[data-fieldname=\"custom_new_selling_rate\"] .control-input-wrapper').css('background-color', 'yellow');\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Price Rule",
  "enabled": 1,
  "modified": "2024-05-12 22:18:05.833366",
  "module": "Bizbee_pro",
  "name": "Price Slab Calculation",
  "script": "frappe.ui.form.on('Service Price Rule', {\n    refresh: function(frm) {\n        frm.fields_dict['price_slabs'].grid.get_field('buying_rate').get_query = function() {\n            return {\n                // Add any filters you need for the buying rate field in the child table\n            };\n        };\n\n        frm.fields_dict['price_slabs'].grid.get_field('markup_').get_query = function() {\n            return {\n                // Add any filters you need for the markup field in the child table\n            };\n        };\n    }\n});\n\nfrappe.ui.form.on('Price Slab', {\n    buying_rate: function(frm, cdt, cdn) {\n        calculateSellingRate(frm, cdt, cdn);\n    },\n    markup_: function(frm, cdt, cdn) {\n        calculateSellingRate(frm, cdt, cdn);\n    },\n    selling_rate: function(frm, cdt, cdn) {\n        calculateMarkup(frm, cdt, cdn);\n    }\n});\n\nfunction calculateSellingRate(frm, cdt, cdn) {\n    var child = locals[cdt][cdn];\n    var markupAmount = child.buying_rate * (child.markup_ / 100);\n    var sellingRate = parseFloat(child.buying_rate) + markupAmount;\n    frappe.model.set_value(cdt, cdn, 'selling_rate', sellingRate);\n}\n\nfunction calculateMarkup(frm, cdt, cdn) {\n    var child = locals[cdt][cdn];\n    var buyingRate = child.buying_rate;\n    var sellingRate = child.selling_rate;\n    \n    if (buyingRate && sellingRate) {\n        var markupPercentage = ((sellingRate - buyingRate) / buyingRate) * 100;\n        frappe.model.set_value(cdt, cdn, 'markup_', markupPercentage);\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-05-17 12:00:47.407912",
  "module": "Bizbee_pro",
  "name": "Estimate Rate Slab",
  "script": "frappe.ui.form.on(\"Sales Order Item\", {\n    custom_rate_slab: function(frm, cdt, cdn) {\n        var child = locals[cdt][cdn];\n\n        // Flag to track if the message has been displayed\n        var messageDisplayed = false;\n\n        frappe.call({\n            method: \"bizbee_pro.api.get_service_price_rule\",\n            args: { item_code: child.item_code },\n            callback: function(response) {\n                if (response.message) {\n                    var price_slabs = response.message.price_slabs;\n                    var matching_slab = null;\n                    for (var i = 0; i < price_slabs.length; i++) {\n                        if (price_slabs[i].price_slab.trim() === child.custom_rate_slab.trim()) {\n                            matching_slab = price_slabs[i];\n                            break;\n                        }\n                    }\n                    if (matching_slab) {\n                        if (parseFloat(matching_slab.selling_rate) === 0) {\n                            // Show message and set to Base Rate\n                            if (child.custom_rate_slab !== 'Base Rate') {\n                                frappe.msgprint({\n                                    title: __('Rate Slab Not Defined'),\n                                    message: __('The rate slab is not defined. Defaulting to Base Rate.')\n                                });\n                            }\n                            frappe.model.set_value(cdt, cdn, 'custom_rate_slab', 'Base Rate');\n                            frappe.model.set_value(cdt, cdn, 'rate', child.base_rate);\n                            frappe.model.set_value(cdt, cdn, 'custom_markup_', matching_slab.markup_); // keep the actual markup\n                        } else {\n                            frappe.model.set_value(cdt, cdn, \"rate\", matching_slab.selling_rate);\n                            frappe.model.set_value(cdt, cdn, \"custom_markup_\", matching_slab.markup_);\n                        }\n                    } else {\n                        if (!messageDisplayed && child.custom_rate_slab !== 'Base Rate') {\n                            frappe.msgprint({\n                                title: __('No Rate Slab'),\n                                message: __('No Slab Rate found for the selected. Defaulting to Base Rate..')\n                            });\n                            frappe.model.set_value(cdt, cdn, 'custom_rate_slab', 'Base Rate');\n                            frappe.model.set_value(cdt, cdn, 'rate', child.base_rate);\n                            frappe.model.set_value(cdt, cdn, 'custom_markup_', 0); // Assuming default markup is 0\n                            messageDisplayed = true;\n                        }\n                    }\n                } else {\n                    if (!messageDisplayed && child.custom_rate_slab !== 'Base Rate') {\n                        frappe.msgprint({\n                            title: __('Item Code Not Found'),\n                            message: __('No Slab Rate found for the selected. Defaulting to Base Rate..')\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_rate_slab', 'Base Rate');\n                        frappe.model.set_value(cdt, cdn, 'rate', child.base_rate);\n                        frappe.model.set_value(cdt, cdn, 'custom_markup_', 0); // Assuming default markup is 0\n                        messageDisplayed = true;\n                    }\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-05-17 17:29:01.913993",
  "module": "Bizbee_pro",
  "name": "Sales Invoice Rate Slab",
  "script": "frappe.ui.form.on(\"Sales Invoice Item\", {\n    custom_rate_slab: function(frm, cdt, cdn) {\n        var child = locals[cdt][cdn];\n\n        // Flag to track if the message has been displayed\n        var messageDisplayed = false;\n\n        frappe.call({\n            method: \"bizbee_pro.api.get_service_price_rule\",\n            args: { item_code: child.item_code },\n            callback: function(response) {\n                if (response.message) {\n                    var price_slabs = response.message.price_slabs;\n                    var matching_slab = null;\n                    for (var i = 0; i < price_slabs.length; i++) {\n                        if (price_slabs[i].price_slab.trim() === child.custom_rate_slab.trim()) {\n                            matching_slab = price_slabs[i];\n                            break;\n                        }\n                    }\n                    if (matching_slab) {\n                        if (parseFloat(matching_slab.selling_rate) === 0) {\n                            // Show message and set to Base Rate\n                            if (child.custom_rate_slab !== 'Base Rate') {\n                                frappe.msgprint({\n                                    title: __('Rate Slab Not Defined'),\n                                    message: __('The rate slab is not defined. Defaulting to Base Rate.')\n                                });\n                            }\n                            frappe.model.set_value(cdt, cdn, 'custom_rate_slab', 'Base Rate');\n                            frappe.model.set_value(cdt, cdn, 'rate', child.base_rate);\n                            frappe.model.set_value(cdt, cdn, 'custom_markup_', matching_slab.markup_); // keep the actual markup\n                        } else {\n                            frappe.model.set_value(cdt, cdn, \"rate\", matching_slab.selling_rate);\n                            frappe.model.set_value(cdt, cdn, \"custom_markup_\", matching_slab.markup_);\n                        }\n                    } else {\n                        if (!messageDisplayed && child.custom_rate_slab !== 'Base Rate') {\n                            frappe.msgprint({\n                                title: __('No Rate Slab'),\n                                message: __('No Slab Rate found for the selected. Defaulting to Base Rate..')\n                            });\n                            frappe.model.set_value(cdt, cdn, 'custom_rate_slab', 'Base Rate');\n                            frappe.model.set_value(cdt, cdn, 'rate', child.base_rate);\n                            frappe.model.set_value(cdt, cdn, 'custom_markup_', 0); // Assuming default markup is 0\n                            messageDisplayed = true;\n                        }\n                    }\n                } else {\n                    if (!messageDisplayed && child.custom_rate_slab !== 'Base Rate') {\n                        frappe.msgprint({\n                            title: __('Item Code Not Found'),\n                            message: __('No Slab Rate found for the selected. Defaulting to Base Rate..')\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_rate_slab', 'Base Rate');\n                        frappe.model.set_value(cdt, cdn, 'rate', child.base_rate);\n                        frappe.model.set_value(cdt, cdn, 'custom_markup_', 0); // Assuming default markup is 0\n                        messageDisplayed = true;\n                    }\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 }
]