[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-05-06 19:48:35.451384",
  "module": "Bizbee_pro",
  "name": "Reminder",
  "reference_doctype": "Delivery Note",
  "script": "def insert_project_data(doc):\n    # Fetch all data from Delivery Note doctype\n    test_docs = frappe.get_all(\n        \"Delivery Note\",\n        filters={},\n        fields=[\"name\",\"customer\"],\n        limit=1,\n        order_by=\"creation desc\"\n    )\n\n    if test_docs:\n        latest_test_doc = test_docs[0]\n\n             \n        # Fetch Delivery Note Item\n        test3_docs = frappe.get_all(\n            \"Delivery Note Item\",\n            filters={\"parent\": doc.name},  \n            fields=[\"item_code\", \"item_name\", \"qty\", \"custom_approval_date\", \"against_sales_order\", \"custom_expiry_date\"]\n        )\n\n       \n        #if test3_docs:\n        \t\n        for test3 in test3_docs:\n                \n            # Create RemindMe\n            office_doc = frappe.new_doc(\"Reminder\")\n            office_doc.item_code = test3.item_code\n            office_doc.item_name = test3.item_name\n            office_doc.quantity = test3.qty\n            office_doc.date_of_expiry = test3.custom_expiry_date\n            \n            office_doc.estimate = test3.against_sales_order\n            \n            office_doc.client_name = latest_test_doc.customer\n                \n    \n            # Save the ReminMe\n            office_doc.insert(ignore_permissions=True)\n\n# Assuming you have a 'doc' variable defined somewhere before calling the function\ninsert_project_data(doc)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-05-05 21:40:26.566780",
  "module": "Bizbee_pro",
  "name": "Legal Documentation",
  "reference_doctype": "Customer",
  "script": "def insert_project_data(doc):\n    # Fetch all data from Customer doctype\n    test_docs = frappe.get_all(\n        \"Customer\",\n        filters={},\n        fields=[\"name\",\"customer_name\"],\n        limit=1,\n        order_by=\"creation desc\"\n    )\n\n    if test_docs:\n        latest_test_doc = test_docs[0]\n\n             \n        # Fetch Legal Documentation\n        test3_docs = frappe.get_all(\n            \"Legal Documentation\",\n            filters={\"parent\": doc.name},  \n            fields=[\"service_code\", \"service_name\", \"qty\", \"document_no\", \"expiry_date\"]\n        )\n\n       \n        #if test3_docs:\n        \t\n        for test3 in test3_docs:\n                \n            # Create RemindMe\n            office_doc = frappe.new_doc(\"Reminder\")\n            office_doc.item_code = test3.service_code\n            office_doc.item_name = test3.service_name\n            office_doc.quantity = test3.qty\n            office_doc.date_of_expiry = test3.expiry_date\n            office_doc.document_no = test3.document_no\n            office_doc.client_name = latest_test_doc.customer_name\n                \n    \n            # Save the ReminMe\n            office_doc.insert(ignore_permissions=True)\n\n# Assuming you have a 'doc' variable defined somewhere before calling the function\ninsert_project_data(doc)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-05-05 21:40:01.026096",
  "module": "Bizbee_pro",
  "name": "Add Category Service",
  "reference_doctype": "Sales Order",
  "script": "def insert_project_data(doc):\n    # Check if the custom_add_to_category_service checkbox is checked\n    if doc.get(\"custom_add_to_category_service\"):\n        # Fetch all data from Customer doctype\n        test_docs = frappe.get_all(\n            \"Sales Order\",\n            filters={},\n            fields=[\"name\", \"custom_business_type\"],\n            limit=1,\n            order_by=\"creation desc\"\n        )\n\n        if test_docs:\n            latest_test_doc = test_docs[0]\n\n            # Fetch Legal Documentation\n            test3_docs = frappe.get_all(\n                \"Sales Order Item\",\n                filters={\"parent\": doc.name},\n                fields=[\"item_code\"]\n            )\n\n            if test3_docs:\n                for test3 in test3_docs:\n                    # Check if the entry already exists in the \"Category Service\" table\n                    query = \"\"\"SELECT name FROM `tabCategory Service` \n                               WHERE item_code = %s AND category = %s\"\"\"\n                    existing_entry = frappe.db.sql(query, (test3.item_code, latest_test_doc.custom_business_type))\n\n                    if not existing_entry:\n                        # Create RemindMe\n                        office_doc = frappe.new_doc(\"Category Service\")\n                        office_doc.item_code = test3.item_code\n                        office_doc.category = latest_test_doc.custom_business_type\n\n                        # Save the ReminMe\n                        office_doc.insert(ignore_permissions=True)\n\n# Assuming you have a 'doc' variable defined somewhere before calling the function\ninsert_project_data(doc)\ndef insert_project_data(doc):\n    # Check if the custom_add_to_category_service checkbox is checked\n    if doc.get(\"custom_add_to_category_service\"):\n        # Fetch all data from Customer doctype\n        test_docs = frappe.get_all(\n            \"Sales Order\",\n            filters={},\n            fields=[\"name\", \"custom_business_type\"],\n            limit=1,\n            order_by=\"creation desc\"\n        )\n\n        if test_docs:\n            latest_test_doc = test_docs[0]\n\n            # Fetch Legal Documentation\n            test3_docs = frappe.get_all(\n                \"Sales Order Item\",\n                filters={\"parent\": doc.name},\n                fields=[\"item_code\"]\n            )\n\n            if test3_docs:\n                for test3 in test3_docs:\n                    # Check if the entry already exists in the \"Category Service\" table\n                    query = \"\"\"SELECT name FROM `tabCategory Service` \n                               WHERE item_code = %s AND category = %s\"\"\"\n                    existing_entry = frappe.db.sql(query, (test3.item_code, latest_test_doc.custom_business_type))\n\n                    if not existing_entry:\n                        # Create RemindMe\n                        office_doc = frappe.new_doc(\"Category Service\")\n                        office_doc.item_code = test3.item_code\n                        office_doc.category = latest_test_doc.custom_business_type\n\n                        # Save the ReminMe\n                        office_doc.insert(ignore_permissions=True)\n\n# Assuming you have a 'doc' variable defined somewhere before calling the function\ninsert_project_data(doc)\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-05-05 21:38:28.099816",
  "module": "Bizbee_pro",
  "name": "Purchase Update",
  "reference_doctype": "Sales Order",
  "script": "def insert_estimate_data(doc):\n    # Fetch all data from Estimate doctype\n    test_docs = frappe.get_all(\n        \"Sales Order\",\n        filters={},\n        fields=[\"name\",\"customer_name\"],\n        limit=1,\n        order_by=\"creation desc\"\n    )\n\n    if test_docs:\n        latest_test_doc = test_docs[0]\n\n             \n        # Fetch Sales Order Item\n        test3_docs = frappe.get_all(\n            \"Sales Order Item\",\n            filters={\"parent\": doc.name},  \n            fields=[\"item_code\", \"item_name\", \"qty\", \"custom_department\", \"custom_department\"]\n        )\n\n       \n        #if test3_docs:\n        \t\n        for test3 in test3_docs:\n                \n            # Create Purchase Update\n            office_doc = frappe.new_doc(\"Purchase Update\")\n            office_doc.item_code = test3.item_code\n            office_doc.item_name = test3.item_name\n            office_doc.quantity = test3.qty\n            office_doc.department = test3.custom_department\n            office_doc.item_name = test3.item_name\n            office_doc.client_name = latest_test_doc.customer_name\n            office_doc.estimate_no = latest_test_doc.name\n    \n            # Save the ReminMe\n            office_doc.insert(ignore_permissions=True)\n\n# Assuming you have a 'doc' variable defined somewhere before calling the function\ninsert_estimate_data(doc)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-05-05 21:39:40.173067",
  "module": "Bizbee_pro",
  "name": "Purchase Status",
  "reference_doctype": "Purchase Order",
  "script": "def update_purchase_update_status(doc):\n    # Iterate over Purchase Order Items\n    for item in doc.get(\"items\", []):\n        # Check if custom_purchase_update_id matches the name of a Purchase Update document\n        if item.get(\"custom_purchase_update_id\"):\n            purchase_update = frappe.get_doc(\"Purchase Update\", item.get(\"custom_purchase_update_id\"))\n            if purchase_update:\n                # Update the status to \"PO Created\"\n                purchase_update.status = \"PO Created\"\n                purchase_update.save()\n\n# Call the function with the 'doc' variable defined\nupdate_purchase_update_status(doc)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-05-09 19:26:41.016084",
  "module": "Bizbee_pro",
  "name": "Purchase Invoice Rate",
  "reference_doctype": "Purchase Invoice",
  "script": "def update_item_price(doc):\n    # Iterate through each item in the Purchase Invoice\n    for item in doc.items:\n        # Fetch the latest Item Price for the item code and \"Standard Buying\" price list\n        latest_item_price = frappe.get_all(\n            \"Item Price\",\n            filters={\"item_code\": item.item_code, \"price_list\": \"Standard Buying\"},\n            fields=[\"name\", \"price_list_rate\"],\n            order_by=\"creation desc\",\n            limit=1\n        )\n\n        if latest_item_price:\n            latest_price_list_rate = latest_item_price[0].get(\"price_list_rate\")\n            # Compare the fetched price_list_rate with the rate from Purchase Invoice Item\n            if latest_price_list_rate == item.rate:\n                # If price_list_rate matches the rate, continue to the next item\n                continue\n\n            # If price_list_rate doesn't match the rate, update the Item Price\n            item_price_doc = frappe.get_doc(\"Item Price\", latest_item_price[0][\"name\"])\n            item_price_doc.price_list_rate = item.rate\n            item_price_doc.save(ignore_permissions=True)\n        else:\n            # If no Item Price exists, create a new one\n            new_item_price = frappe.new_doc(\"Item Price\")\n            new_item_price.item_code = item.item_code\n            new_item_price.price_list_rate = item.rate\n            new_item_price.price_list = \"Standard Buying\"\n            new_item_price.insert(ignore_permissions=True)\n\ndef insert_project_data(doc):\n    # Fetch all data from Purchase Invoice doctype\n    test_docs = frappe.get_all(\n        \"Purchase Invoice\",\n        filters={},\n        fields=[\"name\", \"supplier\"],\n        limit=1,\n        order_by=\"creation desc\"\n    )\n\n    if test_docs:\n        latest_test_doc = test_docs[0]\n\n        # Fetch Purchase Invoice Item\n        test3_docs = frappe.get_all(\n            \"Purchase Invoice Item\",\n            filters={\"parent\": doc.name},\n            fields=[\"item_code\", \"rate\"]\n        )\n\n        for test3 in test3_docs:\n            # Query the latest Item Price for the same item_code and price_list\n            latest_item_price = frappe.get_all(\n                \"Item Price\",\n                filters={\"item_code\": test3.item_code, \"price_list\": \"Standard Buying\"},\n                fields=[\"price_list_rate\"],\n                order_by=\"creation desc\",\n                limit=1\n            )\n\n            if latest_item_price:\n                latest_price_list_rate = latest_item_price[0].get(\"price_list_rate\")\n                # Compare the fetched price_list_rate with the rate\n                if latest_price_list_rate == test3.rate:\n                    # If price_list_rate matches the rate, discontinue\n                    continue\n\n            # Create Item Price\n            office_doc = frappe.new_doc(\"Item Price\")\n            office_doc.item_code = test3.item_code\n            office_doc.price_list_rate = test3.rate\n            office_doc.price_list = \"Standard Buying\"\n            office_doc.valid_from = frappe.utils.now() # Set the valid_from field to the current datetime using now() from frappe.utils\n            \n            # Save the Item Price\n            office_doc.insert(ignore_permissions=True)\n\n# Assuming you have a 'doc' variable defined somewhere before calling the function\ninsert_project_data(doc)\nupdate_item_price(doc)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-05-09 19:48:25.266965",
  "module": "Bizbee_pro",
  "name": "Purchase Invoice -Selling Rate",
  "reference_doctype": "Purchase Invoice",
  "script": "def update_item_price(doc):\n    # Iterate through each item in the Purchase Invoice\n    for item in doc.items:\n        # Check if custom_new_selling_rate is 0, if so, continue to the next item\n        if item.custom_new_selling_rate == 0:\n            continue\n\n        # Fetch the latest Item Price for the item code and \"Standard Selling\" price list\n        latest_item_price = frappe.get_all(\n            \"Item Price\",\n            filters={\"item_code\": item.item_code, \"price_list\": \"Standard Selling\"},\n            fields=[\"name\", \"price_list_rate\"],\n            order_by=\"creation desc\",\n            limit=1\n        )\n\n        if latest_item_price:\n            latest_price_list_rate = latest_item_price[0].get(\"price_list_rate\")\n            # Compare the fetched price_list_rate with the custom_new_selling_rate from Purchase Invoice Item\n            if latest_price_list_rate == item.custom_new_selling_rate:\n                # If price_list_rate matches the custom_new_selling_rate, continue to the next item\n                continue\n\n            # If price_list_rate doesn't match the custom_new_selling_rate, update the Item Price\n            item_price_doc = frappe.get_doc(\"Item Price\", latest_item_price[0][\"name\"])\n            item_price_doc.price_list_rate = item.custom_new_selling_rate\n            item_price_doc.save(ignore_permissions=True)\n        else:\n            # If no Item Price exists, create a new one\n            new_item_price = frappe.new_doc(\"Item Price\")\n            new_item_price.item_code = item.item_code\n            new_item_price.price_list_rate = item.custom_new_selling_rate\n            new_item_price.price_list = \"Standard Selling\"\n            new_item_price.insert(ignore_permissions=True)\n\ndef insert_project_data(doc):\n    # Fetch all data from Purchase Invoice doctype\n    test_docs = frappe.get_all(\n        \"Purchase Invoice\",\n        filters={},\n        fields=[\"name\", \"supplier\"],\n        limit=1,\n        order_by=\"creation desc\"\n    )\n\n    if test_docs:\n        latest_test_doc = test_docs[0]\n\n        # Fetch Purchase Invoice Item\n        test3_docs = frappe.get_all(\n            \"Purchase Invoice Item\",\n            filters={\"parent\": doc.name},\n            fields=[\"item_code\", \"custom_new_selling_rate\"]\n        )\n\n        for test3 in test3_docs:\n            # Check if custom_new_selling_rate is 0, if so, continue to the next item\n            if test3.custom_new_selling_rate == 0:\n                continue\n\n            # Query the latest Item Price for the same item_code and price_list\n            latest_item_price = frappe.get_all(\n                \"Item Price\",\n                filters={\"item_code\": test3.item_code, \"price_list\": \"Standard Selling\"},\n                fields=[\"price_list_rate\"],\n                order_by=\"creation desc\",\n                limit=1\n            )\n\n            if latest_item_price:\n                latest_price_list_rate = latest_item_price[0].get(\"price_list_rate\")\n                # Compare the fetched price_list_rate with the custom_new_selling_rate\n                if latest_price_list_rate == test3.custom_new_selling_rate:\n                    # If price_list_rate matches the custom_new_selling_rate, discontinue\n                    continue\n\n            # Create Item Price\n            office_doc = frappe.new_doc(\"Item Price\")\n            office_doc.item_code = test3.item_code\n            office_doc.price_list_rate = test3.custom_new_selling_rate\n            office_doc.price_list = \"Standard Selling\"\n            office_doc.valid_from = frappe.utils.now()  # Set the valid_from field to the current datetime using now() from frappe.utils\n\n            # Save the Item Price\n            office_doc.insert(ignore_permissions=True)\n\n# Assuming you have a 'doc' variable defined somewhere before calling the function\ninsert_project_data(doc)\nupdate_item_price(doc)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-05-13 17:45:09.460329",
  "module": "Bizbee_pro",
  "name": "Estimate Rate Slab",
  "reference_doctype": "Sales Order",
  "script": "# Define a function to be called when custom_rate_slab field is changed\ndef calculate_rate(doc, method):\n    # Iterate through Sales Order Items\n    for item in doc.get(\"items\"):\n        # Check if custom_rate_slab is Base Rate, if so, no action needed\n        if doc.custom_rate_slab == \"Base Rate\":\n            return\n        # Check if custom_rate_slab is one of the Slabs\n        if doc.custom_rate_slab.startswith(\"Slab\"):\n            # Get the data from Service Price Rule based on service_code\n            service_price_rule = frappe.get_doc(\"Service Price Rule\", doc.service_code)\n            if service_price_rule:\n                # Iterate through Price Slabs\n                for price_slab in service_price_rule.get(\"price_slabs\"):\n                    # Match the price_slab with the custom_rate_slab\n                    if price_slab.price_slab == doc.custom_rate_slab:\n                        # Set the rate in Sales Order Item\n                        item.rate = price_slab.selling_rate\n                        break  # Exit the loop as soon as rate is set\n\n# Assign the function to the relevant DocType and event\ndoc_events = {\n    \"Sales Order\": {\n        \"validate\": calculate_rate\n    }\n}\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-05-14 21:07:46.874671",
  "module": "Bizbee_pro",
  "name": "Purchase Selling Rate Update",
  "reference_doctype": "Purchase Invoice",
  "script": "def update_item_price(doc):\n    # Iterate through each item in the Purchase Invoice\n    for item in doc.items:\n        # Fetch the latest Item Price for the item code and \"Standard Selling\" price list\n        latest_item_price = frappe.get_all(\n            \"Item Price\",\n            filters={\"item_code\": item.item_code, \"price_list\": \"Standard Selling\"},\n            fields=[\"name\", \"price_list_rate\"],\n            order_by=\"creation desc\",\n            limit=1\n        )\n\n        if latest_item_price:\n            latest_price_list_rate = latest_item_price[0].get(\"price_list_rate\")\n            # Compare the fetched price_list_rate with the rate from Purchase Invoice Item\n            if latest_price_list_rate == item.rate:\n                # If price_list_rate matches the rate, continue to the next item\n                continue\n\n            # If price_list_rate doesn't match the rate, update the Item Price\n            item_price_doc = frappe.get_doc(\"Item Price\", latest_item_price[0][\"name\"])\n            item_price_doc.price_list_rate = item.rate\n            item_price_doc.save(ignore_permissions=True)\n        else:\n            # If no Item Price exists, create a new one\n            new_item_price = frappe.new_doc(\"Item Price\")\n            new_item_price.item_code = item.item_code\n            new_item_price.price_list_rate = item.rate\n            new_item_price.price_list = \"Standard Selling\"\n            new_item_price.insert(ignore_permissions=True)\n\ndef insert_project_data(doc):\n    # Fetch all data from Purchase Invoice doctype\n    test_docs = frappe.get_all(\n        \"Purchase Invoice\",\n        filters={},\n        fields=[\"name\", \"supplier\"],\n        limit=1,\n        order_by=\"creation desc\"\n    )\n\n    if test_docs:\n        latest_test_doc = test_docs[0]\n\n        # Fetch Purchase Invoice Item\n        test3_docs = frappe.get_all(\n            \"Purchase Invoice Item\",\n            filters={\"parent\": doc.name},\n            fields=[\"item_code\", \"rate\"]\n        )\n\n        for test3 in test3_docs:\n            # Query the latest Item Price for the same item_code and price_list\n            latest_item_price = frappe.get_all(\n                \"Item Price\",\n                filters={\"item_code\": test3.item_code, \"price_list\": \"Standard Selling\"},\n                fields=[\"price_list_rate\"],\n                order_by=\"creation desc\",\n                limit=1\n            )\n\n            if latest_item_price:\n                latest_price_list_rate = latest_item_price[0].get(\"price_list_rate\")\n                # Compare the fetched price_list_rate with the rate\n                if latest_price_list_rate == test3.rate:\n                    # If price_list_rate matches the rate, discontinue\n                    continue\n\n            # Create Item Price\n            office_doc = frappe.new_doc(\"Item Price\")\n            office_doc.item_code = test3.item_code\n            office_doc.price_list_rate = test3.rate\n            office_doc.price_list = \"Standard Selling\"\n            office_doc.valid_from = frappe.utils.now() # Set the valid_from field to the current datetime using now() from frappe.utils\n            \n            # Save the Item Price\n            office_doc.insert(ignore_permissions=True)\n\n# Assuming you have a 'doc' variable defined somewhere before calling the function\ninsert_project_data(doc)\nupdate_item_price(doc)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-05-15 21:07:53.405717",
  "module": "Bizbee_pro",
  "name": "Purchase Invoice - Service Price Rule",
  "reference_doctype": "Purchase Invoice",
  "script": "def update_price_slab(doc):\n    for item in doc.items:\n        # Check if there is an existing Service Price Rule for the item_code\n        service_price_rule = frappe.db.get_value(\n            \"Service Price Rule\",\n            {\"service_code\": item.item_code},\n            \"name\"\n        )\n\n        if not service_price_rule:\n            # Create a new Service Price Rule if it doesn't exist\n            new_service_price_rule = frappe.new_doc(\"Service Price Rule\")\n            new_service_price_rule.service_code = item.item_code\n\n            try:\n                new_service_price_rule.insert(ignore_permissions=True)\n                service_price_rule = new_service_price_rule.name  # Get the name of the newly created Service Price Rule\n            except Exception as e:\n                pass  # Handle exception based on your requirements\n\n        # Now, service_price_rule should be available whether it existed before or just created\n        \n        # Create Price Slab records associated with the Service Price Rule\n        for i in range(6):  # Loop to create Price Slab records from Base Rate to Slab - 5\n            price_slab_name = \"Base Rate\" if i == 0 else f\"Slab \u2013 {i}\"\n            # Check if the Price Slab already exists\n            existing_price_slab = frappe.db.exists(\n                \"Price Slab\",\n                {\"parent\": service_price_rule, \"price_slab\": price_slab_name}\n            )\n\n            if existing_price_slab:\n                # Update existing Price Slab\n                existing_slab_doc = frappe.get_doc(\"Price Slab\", existing_price_slab)\n                if existing_slab_doc.buying_rate != item.rate:\n                    existing_slab_doc.buying_rate = item.rate\n                    existing_slab_doc.save(ignore_permissions=True)\n            else:\n                # Create new Price Slab\n                new_price_slab = frappe.new_doc(\"Price Slab\")\n                new_price_slab.parent = service_price_rule\n                new_price_slab.parenttype = \"Service Price Rule\"\n                new_price_slab.price_slab = price_slab_name\n                new_price_slab.buying_rate = item.rate\n\n                try:\n                    new_price_slab.insert(ignore_permissions=True)\n                except Exception as e:\n                    pass  # Handle exception based on your requirements\n\n# Call the function with the 'doc' variable defined somewhere before calling the function\nupdate_price_slab(doc)\n",
  "script_type": "DocType Event"
 }
]